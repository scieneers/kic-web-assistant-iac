provider "kubernetes" {
  host                   = azurerm_kubernetes_cluster.kic_k8s_cluster.kube_config.0.host
  username               = azurerm_kubernetes_cluster.kic_k8s_cluster.kube_config.0.username
  password               = azurerm_kubernetes_cluster.kic_k8s_cluster.kube_config.0.password
  client_certificate     = base64decode(azurerm_kubernetes_cluster.kic_k8s_cluster.kube_config.0.client_certificate)
  client_key             = base64decode(azurerm_kubernetes_cluster.kic_k8s_cluster.kube_config.0.client_key)
  cluster_ca_certificate = base64decode(azurerm_kubernetes_cluster.kic_k8s_cluster.kube_config.0.cluster_ca_certificate)
}

provider "helm" {
  kubernetes {
    host                   = azurerm_kubernetes_cluster.kic_k8s_cluster.kube_config.0.host
    username               = azurerm_kubernetes_cluster.kic_k8s_cluster.kube_config.0.username
    password               = azurerm_kubernetes_cluster.kic_k8s_cluster.kube_config.0.password
    client_certificate     = base64decode(azurerm_kubernetes_cluster.kic_k8s_cluster.kube_config.0.client_certificate)
    client_key             = base64decode(azurerm_kubernetes_cluster.kic_k8s_cluster.kube_config.0.client_key)
    cluster_ca_certificate = base64decode(azurerm_kubernetes_cluster.kic_k8s_cluster.kube_config.0.cluster_ca_certificate)
  }
}

locals {
    namespace                 = "${var.resource_prefix}"
    ingressClass              = "nginx"
    hostname                  = "${var.resource_prefix}-${local.environment}"
    ssl_cert_owner_email      = "sebastian.drewke@scieneers.de"
}

resource "kubernetes_namespace" "ns" {
  metadata {
    name = local.namespace
  }

  depends_on = [azurerm_kubernetes_cluster.kic_k8s_cluster]
}

resource "helm_release" "qdrant" {
  name        = "qdrant"
  chart       = "qdrant"
  repository  = "https://qdrant.github.io/qdrant-helm"
  namespace   = "${local.namespace}"
  values = [
    file("charts/qdrant/values.yaml")
      ]

  max_history = 3
  create_namespace = true
  wait             = true
  reset_values     = true

  depends_on = [kubernetes_namespace.ns]
}

# resource "helm_release" "kicwa-frontend" {
#   name        = "${var.resource_prefix}-frontend"
#   chart       = "charts/kicwa-frontend"
#   namespace   = "${local.namespace}"
#   create_namespace = true
#   wait             = true

#   values = [
#     file("charts/kicwa-frontend/values.yaml")
#   ]

#   depends_on = [kubernetes_namespace.ns]
# }

resource "helm_release" "ingress-nginx" {
  name        = "ingress-nginx"
  chart       = "ingress-nginx"
  repository  = "https://kubernetes.github.io/ingress-nginx"
  namespace   = "${local.namespace}"
  force_update = "true"
  version      = "4.7.1"
  wait         = true

  set {
    name = "controller.service.externalTrafficPolicy"
    value = "Local"
  }

  set {
    name  = "controller.replicaCount"
    value = 2
  }

  set {
    name = "controller.ingressClassResource.name"
    value = "${local.ingressClass}"
  }
  
  set {
    name  = "controller.ingressClassResource.default"
    value = "true"
  }

  set {
    name  = "service.beta.kubernetes.io/azure-dns-label-name"
    value = "${local.hostname}"
  }

    set {
    name  = "controller.service.loadBalancerIP"
    value = "${azurerm_public_ip.kicwa-pip.ip_address}"
  }

  depends_on = [
    kubernetes_namespace.ns
  ]
}

resource "helm_release" "cert_manager" {
  name       = "cert-manager"
  repository = "https://charts.jetstack.io"
  chart      = "cert-manager"
  version    = "v1.14.4"
  namespace  = "${local.namespace}"
  
  set {
    name  = "installCRDs"
    value = true
  }

  depends_on = [
    helm_release.ingress-nginx
  ]
}

resource "kubectl_manifest" "ca_issuer" {
  wait = true
  yaml_body = <<YAML
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  namespace: "${local.namespace}"
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: "${local.ssl_cert_owner_email}"
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: "${local.ingressClass}"
  YAML
  depends_on = [
    helm_release.cert_manager
  ]
}